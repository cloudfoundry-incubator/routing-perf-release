#!/bin/bash -l

LOG_DIR=/var/vcap/sys/log/performance_tests

RPS=0
NUM_OK="could not extract status codes of responses from summary"

TOTAL_REQUESTS=<%= properties.performance_tests.num_requests %>
TOTAL_CONCURRENT=<%=properties.performance_tests.concurrent_requests%>
URI=<%= properties.performance_tests.protocol %>://<%= properties.performance_tests.address %>:<%= properties.performance_tests.port %>

ensure_log_dir() {
  mkdir -p ${LOG_DIR}
}

run_perf_tests() {
  date=$(date +%s)
  num_loops=$((<%= properties.performance_tests.num_requests %>/<%=properties.performance_tests.concurrent_requests%>))

  # run load test
  echo "Starting load test of ${TOTAL_REQUESTS} requests, ${TOTAL_CONCURRENT} concurrent..."
  exec /var/vcap/packages/boom/bin/boom \
    -n $TOTAL_REQUESTS \
    -c $TOTAL_CONCURRENT \
    -host "<%=properties.performance_tests.host %>" \
    ${URI} | tee ${LOG_DIR}/loadtest_${date}.log
  echo ""

  # requests / sec
  data=$(grep -E "Requests/sec|responses" ${LOG_DIR}/loadtest_${date}.log | tr -s "\n" "," | cut -f 1 -d "," | cut -f 2 -d ":")
  RPS=${data//[[:blank:]]/}
  echo "requests_per_sec: ${RPS}"

  NUM_OK=$(grep "\[200\]" ${LOG_DIR}/loadtest_${date}.log | awk '{ print $2 }')
}

emit_datadog_throughput_metric() {
  rps=$1
  currenttime=$(date +%s)
  deployment=<%= spec.deployment %>
  router=<%= properties.performance_tests.router_tag %>
  version=<%= properties.performance_tests.routing_release_version %>

  curl  -X POST -H "Content-type: application/json" \
  -d "{ \"series\" :
           [{\"metric\":\"performance.requests_per_second\",
            \"points\":[[$currenttime, $rps]],
            \"tags\":[\"deployment:$deployment\", \"router:$router\", \"version:$version\"],
            \"type\":\"gauge\"}]
      }" \
      'https://app.datadoghq.com/api/v1/series?api_key=<%=properties.performance_tests.datadog_api_key %>'
}

main() {
  ensure_log_dir
  run_perf_tests

  if [[ ${NUM_OK} != ${TOTAL_REQUESTS} ]]; then
    echo "Performance tests generated HTTP error from router"
    exit 1
  fi

  emit_datadog_throughput_metric ${RPS}
}

main
